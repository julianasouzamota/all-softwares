<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE DatabaseProfile SYSTEM "dbvis-defs.dtd" [
   <!ENTITY generic-commands SYSTEM "generic-commands.xml">
   <!ENTITY generic-view SYSTEM "generic-view.xml">
   ]>

<!--
   Copyright (c) 2010 DbVis Software AB. All Rights Reserved.
-->

<DatabaseProfile
   desc="Profile for Apache Derby/JavaDB"
   version="$Revision: 12273 $"
   date="$Date: 2010-06-01 17:19:25 +0200 (Tis, 01 Jun 2010) $"
   minver="7.1">

   <!--
    Profile Notes
    =============
      2006-07-18:
        - There is no "Schemas->Schema->Indexes" tree node as it is only
          possible to get limited index information from the SYS. tables
          in Derby.

    Change Log
    ==========
      2007-09-11:
        - Now show Columns and Indexes as child objects for Table objects
      2006-09-18:
        - Added "Empty Table" action for table nodes
      2006-07-18:
        - First version of Derby profile
   -->

   <!-- =================================================================== -->
   <!-- Definition of the commands -->
   <!-- =================================================================== -->

   <Commands>

      &generic-commands;

      <!--
        The "getTableNamesFor" command is used by Database getTableNamesFor().
        It must return table names for the catalog and schema named by
        the ${table_catalog} and ${table_catalog} variables in the first
        column.
      -->
      <Command id="derby.getTableNamesFor">
        <SQL>
          <![CDATA[
SELECT T.TABLENAME
FROM SYS.SYSTABLES T, SYS.SYSSCHEMAS S
WHERE T.SCHEMAID = S.SCHEMAID
  AND CAST(S.SCHEMANAME AS VARCHAR(1024)) = '${table_schema}'
ORDER BY T.TABLENAME
            ]]>
        </SQL>   
      </Command>

      <!--
        The "getColumnNamesFor" command is used by Database getColumnNamesFor().
        It must return column names for the catalog, schema and table named by
        the ${table_catalog}, ${table_catalog} and ${table_name} variables in
        the first column.
      -->
      <Command id="derby.getColumnNamesFor">
        <SQL>
          <![CDATA[
SELECT C.COLUMNNAME
FROM SYS.SYSTABLES T, SYS.SYSSCHEMAS S, SYS.SYSCOLUMNS C
WHERE T.SCHEMAID = S.SCHEMAID AND T.TABLEID = C.REFERENCEID
  AND CAST(S.SCHEMANAME AS VARCHAR(1024)) = '${table_schema}' AND CAST(T.TABLENAME AS VARCHAR(1024)) = '${table_name}'
ORDER BY C.COLUMNNAME
            ]]>
        </SQL>   
      </Command>

      <!-- =================================================================== -->
      <!-- Definition of the generic error handler (for all Commands). Its -->
      <!-- conditions will be evaluated with possible errors produced by each -->
      <!-- commands. If a match is found then the text in the <Message> -->
      <!-- element will be displayed in DbVisualizer. -->
      <!-- =================================================================== -->

      <Command id="derby.getSchemas">
         <SQL>
            <![CDATA[
SELECT
    SCHEMANAME as "Schema",
    SCHEMAID   as "Schema Id"
FROM
    SYS.SYSSCHEMAS
ORDER BY
    SCHEMANAME
            ]]>
         </SQL>
      </Command>

      <Command id="derby.getTables">
         <SQL>
            <![CDATA[
SELECT
    '${schema}'     as "Schema",
    TABLENAME       as "Table Name",
    TABLETYPE       as "Table Type",
    LOCKGRANULARITY as "Lock Granularity",
    SCHEMAID        as "Schema Id",
    TABLEID         as "Table Id"
FROM
    SYS.SYSTABLES
WHERE
    CAST(SCHEMAID AS VARCHAR(1024)) LIKE '${schemaId}'
    AND CAST(TABLETYPE AS CHAR) IN (${tableType})
ORDER BY
    TABLENAME
            ]]>
         </SQL>
      </Command>

      <Command id="derby.getSynonyms">
         <SQL>
            <![CDATA[
SELECT
    '${schema}'       as "Schema",
    T.TABLENAME       as "Synonym Name",
    A.ALIASINFO       as "Target Table",
    T.TABLETYPE       as "Type",
    T.LOCKGRANULARITY as "Lock Granularity",
    T.SCHEMAID        as "Schema Id",
    T.TABLEID         as "Synonym Id"
FROM
    SYS.SYSTABLES T,
    SYS.SYSALIASES A
WHERE
    CAST(T.SCHEMAID AS VARCHAR(1024)) LIKE '${schemaId}'
    AND CAST(T.TABLETYPE AS CHAR) IN ('A')
    AND T.SCHEMAID = A.SCHEMAID
    AND T.TABLENAME = A.ALIAS
ORDER BY
    1,
    T.TABLENAME
            ]]>
         </SQL>
      </Command>

      <Command id="derby.getTriggers">
         <SQL>
            <![CDATA[
SELECT
    s.SCHEMANAME          as "Schema",
    tr.TRIGGERNAME        as "Trigger Name",
    t.TABLENAME           as "Table Name",
    tr.CREATIONTIMESTAMP  as "Created",
    tr.EVENT              as "Event",
    tr.FIRINGTIME         as "Firing Time",
    tr.TYPE               as "Type",
    tr.STATE              as "State",
    tr.WHENSTMTID         as "When Statement Id",
    tr.ACTIONSTMTID       as "Action Statement Id",
    tr.REFERENCEDCOLUMNS  as "Referenced Columns",
    tr.TRIGGERDEFINITION  as "Trigger Definition",
    tr.REFERENCINGOLD     as "Referencing Old",
    tr.REFERENCINGNEW     as "Referencing New",
    tr.OLDREFERENCINGNAME as "Old Referencing Name",
    tr.NEWREFERENCINGNAME as "New Referencing Name"
FROM
    SYS.SYSTRIGGERS tr,
    SYS.SYSSCHEMAS s,
    SYS.SYSTABLES t
WHERE
    CAST(s.schemaid AS VARCHAR(1024)) = '${schemaId}'
    AND tr.SCHEMAID = s.SCHEMAID
    AND tr.TABLEID = t.TABLEID
    ${condition}
ORDER BY
    tr.TRIGGERNAME
            ]]>
         </SQL>
      </Command>

      <Command id="derby.getFunctions">
         <SQL>
            <![CDATA[
SELECT
    s.schemaname    as "Schema",
    a.alias         as "Name",
    a.javaclassname as "Java Class Name",
    a.aliasinfo     as "Interface",
    a.systemalias   as "System Alias"
FROM
    SYS.SYSALIASES a,
    SYS.SYSSCHEMAS s
WHERE
    CAST(a.ALIASTYPE AS CHAR)    in (${functionType})
    and CAST(a.schemaid AS VARCHAR(1024)) = '${schemaId}'
    AND a.SCHEMAID   = s.SCHEMAID
ORDER BY
    a.alias
            ]]>
         </SQL>
      </Command>

      <!-- ================================================================= -->
      <!-- DBA related commands requiring certain privileges in the database -->
      <!-- ================================================================= -->

   </Commands>

   <!-- =================================================================== -->
   <!-- Definition of the object actions that are used by the tree and views -->
   <!-- =================================================================== -->

   <ObjectsActionDef>

      <ActionGroup type="Schemas">
         <Action id="derby-schemas-create" label="Create Schema" reload="true"
                 resetschemas="true" icon="add">
            <Input label="Schema Name" name="schemaName" style="text"/>
            <Command>
              <SQL><![CDATA[create schema ${schemaName}]]></SQL>
            </Command>
            <Result>
               Schema ${schemaName} created!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Schema">
         <Action id="derby-schema-drop" label="Drop Schema" reload="true"
                 resetschemas="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Command><SQL><![CDATA[drop schema "${schema}" restrict]]></SQL></Command>
            <Confirm>
               Really drop schema ${schema}?
            </Confirm>
            <Result>
               Schema ${schema} has been dropped!
            </Result>
         </Action>
         <Action id="derby-schema-export" label="Export Schema"
                 icon="export" reload="false"
                 class="schemaExport"
                 doclink="../exportImport/exportImport.html#mozTocId816546"/>
      </ActionGroup>

      <ActionGroup type="Tables">
         <Action id="derby-tables-create-table" label="Create Table"
                 icon="add" reload="true"
                 class="tableCreateOrAlter"
                 classargs="create"
                 doclink="../tableDesigner/tableDesigner.html#mozTocId786186"/>

         <Action id="derby-new-table-import-data" label="Import Table Data" icon="import"
                 class="tableDataImport"
                 doclink="../exportImport/exportImport.html#mozTocId708449"/>

      </ActionGroup>

      <ActionGroup type="Table">
         <Action id="derby-tables-alter-table" label="Alter Table"
                 icon="edit" reload="true"
                 class="tableCreateOrAlter"
                 classargs="alter"
                 doclink="../tableDesigner/tableDesigner.html#mozTocId740254"/>

         <Action id="derby-table-rename" label="Rename Table" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New Table Name" name="newTable" style="text"/>
            <Command>
               <SQL><![CDATA[rename table "${schema}"."${objectname}" to "${newTable}"]]></SQL>
            </Command>
            <Confirm>
               Confirm rename of ${schema}.${objectname} to ${newTable}?
            </Confirm>
            <Result>
               Table ${schema}.${objectname} renamed to ${newTable}!
            </Result>
         </Action>

         <Action id="derby-table-clear" label="Empty Table" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>

            <Command>
               <SQL><![CDATA[delete from "${schema}"."${objectname}"]]></SQL>
            </Command>
            <Confirm>
               Really remove all rows in table ${schema}.${objectname}?
            </Confirm>
            <Result>
               All rows in table ${schema}.${objectname} has been removed!
            </Result>
         </Action>

         <Action id="derby-table-drop" label="Drop Table" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop table "${schema}"."${objectname}"]]></SQL></Command>
            <Confirm>
               Really drop table ${schema}.${objectname}?
            </Confirm>
            <Result>
               Table ${schema}.${objectname} has been dropped!
            </Result>
         </Action>

         <Action id="derby-table-import-data" label="Import Table Data" icon="import"
                 class="tableDataImport"
                 doclink="../exportImport/exportImport.html#mozTocId708449"/>

         <Action id="derby-table-export" label="Export Table" icon="export"
                 class="tableExport"
                 doclink="../exportImport/exportImport.html#mozTocId584466"/>

         <Separator/>

         <Action id="derby-table-create-index" label="Create Index" reload="true">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Index Name" name="indexname" style="text"/>
            <Input label="Unique" name="unique" style="check">
               <Values>unique</Values>
            </Input>

            <Input label="Columns" style="separator"/>

            <Input name="columns" style="grid">
               <Arg name="output" value='"${columnname}"${_sortorder}'/>
               <Arg name="newline" value=", "/>

               <Input name="columnname" label="Column Name" style="list">
                  <Values column="4">
                     <Command idref="getColumnNamesFor">
                        <Input name="table_catalog" value="${catalog}"/>
                        <Input name="table_schema" value="${schema}"/>
                        <Input name="table_name" value="${objectname}"/>
                     </Command>
                  </Values>
                  <Default>${0}</Default>
               </Input>
               <Input name="sortorder" label="Sort Order" style="radio">
                  <Labels>ASC|DESC|Default</Labels>
                  <Values>ASC|DESC|</Values>
                  <Default>ASC</Default>
               </Input>
               <SetVar name="_sortorder" value='#sortorder.equals("") ? "" : " " + #sortorder'/>
            </Input>

            <SetVar name="_unique" value='#unique.equals("") ? "" : " " + #unique'/>
            <SetVar name="_columns" value='#columns.trim().equals("") ? "" : "(" + #columns + ")"'/>
            <SetVar name="_indexname" value='#indexname.trim().equals("") ? "" : " \"" + #indexname + "\""'/>

            <Command>
               <SQL>
                  <![CDATA[create${_unique} index${_indexname} on "${schema}"."${objectname}" ${_columns}]]>
               </SQL>
            </Command>
            <Confirm>
               <![CDATA[Create index "${indexname}"?]]>
            </Confirm>
            <Result>
               <![CDATA[Index "${indexname}" created!]]>
            </Result>
         </Action>

         <Action id="derby-tabletrigger-create" label="Create Trigger" icon="add" reload="true"
                 doclink="../procEditor/procEditor.html">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" name="triggerName" style="text"/>
            <Input label="Trigger Time" name="triggerTime" style="radio">
               <Values>NO CASCADE BEFORE|AFTER</Values>
               <Default>AFTER</Default>
            </Input>
            <Input label="Trigger Event" name="triggerEvent" style="radio">
               <Values>DELETE|INSERT|UPDATE</Values>
               <Default>INSERT</Default>
            </Input>
            <Input label="Trigger Type" name="triggerType" style="radio">
               <Values>STATEMENT|ROW</Values>
               <Default>STATEMENT</Default>
            </Input>
            <Input label="Table" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="Source" style="separator"/>
            <Input name="source" style="text-editor">
               <Default><![CDATA[
--
--  Insert your own trigger code here
--
    insert into anotherTable (col1, col2) values(val1, val2)]]>
               </Default>
            </Input>

            <SetVar name="refType" value='#triggerType.equals("STATEMENT") ? "_table" : ""'/>
            <SetVar name="_refd" value='#triggerEvent.equals("DELETE") ? "referencing old" + #refType + " as \"OLD_" + #objectname + "\"" : ""'/>
            <SetVar name="_refi" value='#triggerEvent.equals("INSERT") ? "referencing new" + #refType + " as \"NEW_" + #objectname + "\"" : ""'/>
            <SetVar name="_refu" value='#triggerEvent.equals("UPDATE") ? "referencing old" + #refType + " as \"OLD_" + #objectname + "\" new" + #refType + " as \"NEW_" + #objectname + "\"" : ""'/>

            <SetVar name="_ref1" value="#_refi.equals('') ? #_refd : #_refi"/>
            <SetVar name="_ref2" value="#_refu.equals('') ? #_ref1 : #_refu"/>

            <SetVar name="_references" value="#triggerTime.equals('BEFORE') ? '' : '\n' + #_ref2"/>

            <Command parsesql="false">
               <SQL><![CDATA[
create trigger "${schema}"."${triggerName}"
  ${triggerTime} ${triggerEvent}
  on "${schema}"."${objectname}"${_references}
  for each ${triggerType} mode db2sql
${source}]]>
               </SQL>
            </Command>
            <Result>
               <![CDATA[Trigger <b>${schema}.${triggerName}</b> created.]]>
            </Result>
         </Action>

         <Separator/>

         <ActionGroup label="Script Object to SQL Editor">
            <Action id="derby-table-script-select" label="SELECT" icon="selectFrom"
                    class="sqlBuilder"
                    classargs="select"/>
            <Action id="derby-table-script-insert" label="INSERT" icon="insertRow"
                    class="sqlBuilder"
                    classargs="insert"/>
            <Action id="derby-table-script-update" label="UPDATE" icon="updateRow"
                    class="sqlBuilder"
                    classargs="update"/>
            <Action id="derby-table-script-delete" label="DELETE" icon="deleteWhere"
                    class="sqlBuilder"
                    classargs="delete"/>

            <Separator/>

            <Action id="derby-table-script-create" label="CREATE TABLE" icon="createTable"
                    class="ddlGenerator"
                    classargs="createTable"/>
         </ActionGroup>

         <ActionGroup label="Script Object to New SQL Editor">
            <Action id="derby-table-script-select-new" label="SELECT" icon="selectFrom"
                    class="sqlBuilder"
                    classargs="select,newEditor"/>
            <Action id="derby-table-script-insert-new" label="INSERT" icon="insertRow"
                    class="sqlBuilder"
                    classargs="insert,newEditor"/>
            <Action id="derby-table-script-update-new" label="UPDATE" icon="updateRow"
                    class="sqlBuilder"
                    classargs="update,newEditor"/>
            <Action id="derby-table-script-delete-new" label="DELETE" icon="deleteWhere"
                    class="sqlBuilder"
                    classargs="delete,newEditor"/>

            <Separator/>

            <Action id="derby-table-script-create-new" label="CREATE TABLE" icon="createTable"
                    class="ddlGenerator"
                    classargs="createTable,newEditor"/>
         </ActionGroup>
      </ActionGroup>

      <ActionGroup type="View">
         <Action id="derby-view-drop" label="Drop View" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="View" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop view "${schema}"."${objectname}"]]></SQL></Command>
            <Confirm>
               Really drop view ${schema}.${objectname}?
            </Confirm>
            <Result>
               View ${schema}.${objectname} has been dropped!
            </Result>
         </Action>

         <Separator/>

         <ActionGroup label="Script Object to SQL Editor">
            <Action id="derby-view-script-select" label="SELECT" icon="selectFrom"
                    class="sqlBuilder"
                    classargs="select"/>
            <Action id="derby-view-script-insert" label="INSERT" icon="insertRow"
                    class="sqlBuilder"
                    classargs="insert"/>
            <Action id="derby-view-script-update" label="UPDATE" icon="updateRow"
                    class="sqlBuilder"
                    classargs="update"/>
            <Action id="derby-view-script-delete" label="DELETE" icon="deleteWhere"
                    class="sqlBuilder"
                    classargs="delete"/>

            <Separator/>

            <Action id="derby-view-script-create" label="CREATE VIEW" icon="createTable"
                    class="ddlGenerator"
                    classargs="createView"/>
         </ActionGroup>

         <ActionGroup label="Script Object to New SQL Editor">
            <Action id="derby-view-script-select-new" label="SELECT" icon="selectFrom"
                    class="sqlBuilder"
                    classargs="select,newEditor"/>
            <Action id="derby-view-script-insert-new" label="INSERT" icon="insertRow"
                    class="sqlBuilder"
                    classargs="insert,newEditor"/>
            <Action id="derby-view-script-update-new" label="UPDATE" icon="updateRow"
                    class="sqlBuilder"
                    classargs="update,newEditor"/>
            <Action id="derby-view-script-delete-new" label="DELETE" icon="deleteWhere"
                    class="sqlBuilder"
                    classargs="delete,newEditor"/>

            <Separator/>

            <Action id="derby-view-script-create-new" label="CREATE VIEW" icon="createTable"
                    class="ddlGenerator"
                    classargs="createView,newEditor"/>
         </ActionGroup>
      </ActionGroup>

      <ActionGroup type="Synonyms">
         <Action id="derby-synonyms-create" label="Create Synonym" reload="true" icon="add">
            <Input label="Synonym Schema" name="synonymSchema" style="list">
               <Values>
                  <Command>
                     <SQL><![CDATA[
SELECT
    SCHEMANAME
FROM
    SYS.SYSSCHEMAS
ORDER BY
    SCHEMANAME
]]></SQL>
                  </Command>
               </Values>
               <Default>${schema}</Default>
            </Input>
            <Input label="Synonym Name" name="synonymName" style="text"/>
            <Input label="Object Schema" name="objSchema" style="list">
               <Values>
                  <Command>
                     <SQL><![CDATA[
SELECT
    SCHEMANAME
FROM
    SYS.SYSSCHEMAS
ORDER BY
    SCHEMANAME
]]></SQL>
                  </Command>
               </Values>
               <Default>${schema}</Default>
            </Input>
            <Input label="Object Name" name="objName" style="text"/>
            <Command>
              <SQL><![CDATA[create synonym "${synonymSchema}"."${synonymName}" for "${objSchema}"."${objName}"]]></SQL>
            </Command>
            <Result>
               Alias ${aliasSchema}.${aliasName} created!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Synonym">
         <Action id="derby-synonym-drop" label="Drop Synonym" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Synonym" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop synonym "${schema}"."${objectname}"]]></SQL></Command>
            <Confirm>
               Really drop synonym ${schema}.${objectname}?
            </Confirm>
            <Result>
               Synonym ${schema}.${objectname} has been dropped!
            </Result>
         </Action>

         <Separator/>

         <ActionGroup label="Script Object to SQL Editor">
            <Action id="derby-synonym-script-select" label="SELECT" icon="selectFrom"
                    class="sqlBuilder"
                    classargs="select"/>
            <Action id="derby-synonym-script-insert" label="INSERT" icon="insertRow"
                    class="sqlBuilder"
                    classargs="insert"/>
            <Action id="derby-synonym-script-update" label="UPDATE" icon="updateRow"
                    class="sqlBuilder"
                    classargs="update"/>
            <Action id="derby-synonym-script-delete" label="DELETE" icon="deleteWhere"
                    class="sqlBuilder"
                    classargs="delete"/>
         </ActionGroup>

         <ActionGroup label="Script Object to New SQL Editor">
            <Action id="derby-synonym-script-select-new" label="SELECT" icon="selectFrom"
                    class="sqlBuilder"
                    classargs="select,newEditor"/>
            <Action id="derby-synonym-script-insert-new" label="INSERT" icon="insertRow"
                    class="sqlBuilder"
                    classargs="insert,newEditor"/>
            <Action id="derby-synonym-script-update-new" label="UPDATE" icon="updateRow"
                    class="sqlBuilder"
                    classargs="update,newEditor"/>
            <Action id="derby-synonym-script-delete-new" label="DELETE" icon="deleteWhere"
                    class="sqlBuilder"
                    classargs="delete,newEditor"/>
         </ActionGroup>
      </ActionGroup>

      <ActionGroup type="Index">
         <Action id="derby-index-drop" label="Drop Index" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Index" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop index "${schema}"."${objectname}"]]></SQL></Command>
            <Confirm>
               Really drop index ${schema}.${objectname}?
            </Confirm>
            <Result>
               Index ${schema}.${objectname} dropped!
            </Result>
         </Action>

         <Action id="derby-index-rename" label="Rename Index" reload="true" icon="rename">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Index" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Input label="New Index Name" name="newIndex" style="text"/>
            <Command>
               <SQL><![CDATA[rename index "${objectname}" to "${newIndex}"]]></SQL>
            </Command>
            <Confirm>
               Confirm rename of index "${objectname}" to "${newIndex}"?
            </Confirm>
            <Result>
               Index ${objectname} renamed to ${newIndex}!
            </Result>
         </Action>
      </ActionGroup>

      <ActionGroup type="Functions">
         <Action id="derby-functions-create" label="Create Function" reload="true" icon="add"
                 doclink="../procEditor/procEditor.html">
            <Input label="Function Owner" name="functionOwner" style="list">
               <Values>
                  <Command>
                     <SQL>
                        <![CDATA[
SELECT
    SCHEMANAME
FROM
    SYS.SYSSCHEMAS
ORDER BY
    SCHEMANAME
                        ]]>
                     </SQL>
                  </Command>
               </Values>
               <Default>${schema}</Default>
            </Input>
            <Input label="Function Name" name="functionName" style="text"/>
            <Input label="Return Data Type" name="returns" style="text">
               <Default>INTEGER</Default>
            </Input>
            <Input label="External Name" name="externalName" style="text">
               <Default>com.foo.Bar</Default>
            </Input>
            <Input label="Parameters" style="separator"/>
            <Input name="parameters" style="grid">
               <Arg name="output" value="${name} ${type}"/>
               <Arg name="newline" value=", "/>

               <Input name="name" label="Name" style="text"/>
               <Input name="type" label="Type" style="text">
                  <Default>INTEGER</Default>
               </Input>
            </Input>

            <SetVar name="_parameters" value='#parameters.trim().equals("") ? "()" : "(" + #parameters + ")"'/>

            <Command parsesql="false">
               <SQL>
                  <![CDATA[
CREATE FUNCTION "${functionOwner}".${functionName}
${_parameters}
RETURNS ${returns}
LANGUAGE JAVA
PARAMETER STYLE JAVA
EXTERNAL NAME '${externalName}'
                  ]]>
               </SQL>
            </Command>
            <Confirm>
               Create function "${functionOwner}"."${functionName}"?
            </Confirm>
            <Result>
               Function "${functionOwner}"."${functionName}" created!
            </Result>
         </Action>
      </ActionGroup>

     <ActionGroup type="Function">
         <Action id="derby-function-drop" label="Drop Function" reload="true" icon="remove">
         <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Function" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop function "${schema}"."${objectname}"]]></SQL></Command>
            <Confirm>
               Really drop function ${schema}.${objectname}?
            </Confirm>
            <Result>
               Function ${schema}.${objectname} dropped!
            </Result>
         </Action>
         
         <Separator/>

         <ActionGroup label="Script Object to SQL Editor">
            <Action id="derby-function-call" label="CALL" icon="execute"
                    class="sqlBuilder"
                    classargs="call,function"/>
         </ActionGroup>

         <ActionGroup label="Script Object to New SQL Editor">
            <Action id="derby-function-call-new" label="CALL" icon="execute"
                    class="sqlBuilder"
                    classargs="call,function,newEditor"/>
         </ActionGroup>
      </ActionGroup>

      <ActionGroup type="Procedures">
         <Action id="derby-procedures-create" label="Create Procedure" reload="true" icon="add"
                 doclink="../procEditor/procEditor.html">
            <Input label="Procedure Owner" name="procOwner" style="list">
               <Values>
                  <Command>
                     <SQL>
                        <![CDATA[
SELECT
    SCHEMANAME
FROM
    SYS.SYSSCHEMAS
ORDER BY
    SCHEMANAME
                        ]]>
                     </SQL>
                  </Command>
               </Values>
               <Default>${schema}</Default>
            </Input>
            <Input label="Procedure Name" name="procName" style="text"/>
            <Input label="External Name" name="externalName" style="text">
               <Default>com.foo.Bar</Default>
            </Input>

            <Input label="Parameters" style="separator"/>
            <Input name="parameters" style="grid">
               <Arg name="output" value="${direction} ${name} ${type}"/>
               <Arg name="newline" value=", "/>

               <Input name="direction" label="Direction" style="list">
                  <Values>IN|OUT|INOUT</Values>
                  <Default>IN</Default>
               </Input>
               <Input name="name" label="Name" style="text"/>
               <Input name="type" label="Type" style="text">
                  <Default>INTEGER</Default>
               </Input>
            </Input>

            <SetVar name="_parameters" value='#parameters.trim().equals("") ? "()" : "(" + #parameters + ")"'/>

            <Command parsesql="false">
               <SQL>
                  <![CDATA[
CREATE PROCEDURE "${procOwner}".${procName}
${_parameters}
LANGUAGE JAVA
PARAMETER STYLE JAVA
EXTERNAL NAME '${externalName}'
                  ]]>
               </SQL>
            </Command>
            <Confirm>
               Create procedure "${procOwner}"."${procName}"?
            </Confirm>
            <Result>
               Procedure "${procOwner}"."${procName}" created!
            </Result>
         </Action>
      </ActionGroup>
      
      <ActionGroup type="Procedure">
         <Action id="derby-procedure-drop" label="Drop Procedure" reload="true" icon="remove">
         <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Procedure" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop procedure "${schema}"."${objectname}"]]></SQL></Command>
            <Confirm>
               Really drop procedure ${schema}.${objectname}?
            </Confirm>
            <Result>
               Procedure ${schema}.${objectname} dropped!
            </Result>
         </Action>
         
         <Separator/>

         <ActionGroup label="Script Object to SQL Editor">
            <Action id="derby-procedure-call" label="CALL" icon="execute"
                    class="sqlBuilder"
                    classargs="call,procedure"/>
         </ActionGroup>

         <ActionGroup label="Script Object to New SQL Editor">
            <Action id="derby-procedure-call-new" label="CALL" icon="execute"
                    class="sqlBuilder"
                    classargs="call,procedure,newEditor"/>
         </ActionGroup>
      </ActionGroup>

      <ActionGroup type="Trigger">
         <Action id="derby-trigger-drop" label="Drop Trigger" reload="true" icon="remove">
            <Input label="Schema" style="text" editable="false">
               <Default>${schema}</Default>
            </Input>
            <Input label="Trigger" style="text" editable="false">
               <Default>${objectname}</Default>
            </Input>
            <Command><SQL><![CDATA[drop trigger "${schema}"."${objectname}"]]></SQL></Command>
            <Confirm>
               Really drop trigger ${schema}.${objectname}?
            </Confirm>
            <Result>
               Trigger ${schema}.${objectname} dropped!
            </Result>
         </Action>
         
      </ActionGroup>

   </ObjectsActionDef>

   <!-- =================================================================== -->
   <!-- Definition of the database objects tree structure -->
   <!-- =================================================================== -->

   <ObjectsTreeDef id="derby">

      <GroupNode type="Schemas" label="Schemas">
         <DataNode type="Schema" label="${derby.getSchemas.Schema}">
            <SetVar name="schema" value="${derby.getSchemas.Schema}"/>
            <SetVar name="schemaId" value="${derby.getSchemas.Schema Id}"/>
            <Command idref="derby.getSchemas">
               <Filter type="Schema" name="Schema">
                  <Column index="Schema" name="Name"/>
               </Filter>
            </Command>

            <GroupNode type="Tables" label="Tables">
               <DataNode type="Table" label="${derby.getTables.Table Name}">
                  <SetVar name="objectname" value="${derby.getTables.Table Name}"/>
                  <SetVar name="rowcount" value="true"/>
                  <SetVar name="acceptInQB" value="true"/>
                  <Command idref="derby.getTables">
                     <Input name="schemaId" value="${schemaId}"/>
                     <Input name="tableType" value="'S','T'"/>
                     <Filter type="Table" name="Table">
                        <Column index="Table Name" name="Name"/>
                     </Filter>
                  </Command>

                  <!-- Need to keep the objectname for the current table in
                       a new variable so that the viewers will be able to pick up
                       the correct input to display -->
                  <SetVar name="theTableName" value="${objectname}"/>

                  <!-- derby.getTriggers is used both to list all triggers in
                       the schema and triggers related to a specific table.
                       This variable is needed in order to either get all triggers
                       (even those not related to a table) or triggers that
                       really are associated with a table -->
                  <SetVar name="triggersCondition" value="and CAST(t.TABLENAME AS VARCHAR(1024)) = '${theTableName}'"/>
                  
                  <GroupNode type="Columns" label="Columns">
                     <DataNode type="Column" label="${getColumns.COLUMN_NAME}   (${getColumns.TYPE_NAME})" isLeaf="true">
                        <SetVar name="objectname" value="${getColumns.COLUMN_NAME}"/>
                        <Command idref="getColumns">
                           <Input name="schema" value="${schema}"/>
                           <Input name="objectname" value="${theTableName}"/>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Indexes" label="Indexes">
                     <DataNode type="Index" label="${getIndexes.INDEX_NAME}   (${getIndexes.ORDINAL_POSITION}: ${getIndexes.COLUMN_NAME})" isLeaf="true">
                        <SetVar name="objectname" value="${getIndexes.INDEX_NAME}"/>
                        <Command idref="getIndexes">
                           <Input name="schema" value="${schema}"/>
                           <Input name="objectname" value="${theTableName}"/>
                           <Output modelaction="removeisnullrows" index="INDEX_NAME"/>
                        </Command>
                     </DataNode>
                  </GroupNode>

                  <GroupNode type="Triggers" label="Triggers">
                     <DataNode type="Trigger" label="${derby.getTriggers.Trigger Name}" isLeaf="true">
                        <SetVar name="objectname" value="${derby.getTriggers.Trigger Name}"/>
                        <Command idref="derby.getTriggers">
                           <Input name="schemaId" value="${schemaId}"/>
                           <Input name="condition" value="${triggersCondition}"/>
                        </Command>
                     </DataNode>
                  </GroupNode>
                  
               </DataNode>
            </GroupNode>

            <GroupNode type="Views" label="Views">
               <DataNode type="View" label="${derby.getTables.Table Name}" isLeaf="true">
                  <SetVar name="objectname" value="${derby.getTables.Table Name}"/>
                  <SetVar name="rowcount" value="true"/>
                  <SetVar name="acceptInQB" value="true"/>
                  <Command idref="derby.getTables">
                     <Input name="schemaId" value="${schemaId}"/>
                     <Input name="tableType" value="'V'"/>
                     <Filter type="View" name="View">
                        <Column index="Table Name" name="Name"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Synonyms" label="Synonyms">
               <DataNode type="Synonym" label="${derby.getSynonyms.Synonym Name}   (${derby.getSynonyms.Target Table})" isLeaf="true">
                  <SetVar name="objectname" value="${derby.getSynonyms.Synonym Name}"/>
                  <SetVar name="rowcount" value="true"/>
                  <SetVar name="acceptInQB" value="true"/>
                  <Command idref="derby.getSynonyms">
                     <Input name="schemaId" value="${schemaId}"/>
                     <Filter type="Synonym" name="Synonym">
                        <Column index="Synonym Name" name="Name"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Functions" label="Functions">
               <DataNode type="Function" label="${derby.getFunctions.Name}" isLeaf="true">
                  <SetVar name="objectname" value="${derby.getFunctions.Name}"/>
                  <Command idref="derby.getFunctions">
                     <Input name="schemaId" value="${schemaId}"/>
                     <Input name="functionType" value="'F'"/>
                     <Filter type="Function" name="Function">
                        <Column index="Name" name="Name"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <GroupNode type="Procedures" label="Procedures">
               <DataNode type="Procedure" label="${derby.getFunctions.Name}" isLeaf="true">
                  <SetVar name="objectname" value="${derby.getFunctions.Name}"/>
                  <Command idref="derby.getFunctions">
                     <Input name="schemaId" value="${schemaId}"/>
                     <Input name="functionType" value="'P'"/>
                     <Filter type="Procedure" name="Procedure">
                        <Column index="Name" name="Name"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>

            <!-- derby.getTriggers is used both to list all triggers in
                 the schema and triggers related to a specific table.
                 This variable is needed in order to either get all triggers
                 (even those not related to a table) or triggers that
                 really are associated with a table -->
            <SetVar name="triggersCondition" value=""/>
            
            <GroupNode type="Triggers" label="Triggers">
               <DataNode type="Trigger" label="${derby.getTriggers.Trigger Name}" isLeaf="true">
                  <SetVar name="objectname" value="${derby.getTriggers.Trigger Name}"/>
                  <Command idref="derby.getTriggers">
                     <Input name="schemaId" value="${schemaId}"/>
                     <Input name="condition" value=""/>
                     <Filter type="Trigger" name="Trigger">
                        <Column index="Trigger Name" name="Name"/>
                     </Filter>
                  </Command>
               </DataNode>
            </GroupNode>
         </DataNode>
      </GroupNode>

   </ObjectsTreeDef>

   <!-- =================================================================== -->
   <!-- Definition of the database objects views -->
   <!-- =================================================================== -->

   <!-- Include the generic-view -->
   &generic-view;

   <ObjectsViewDef id="derby" extends="generic">

      <ObjectView type="Schemas">
         <DataView type="Schemas" label="Schemas" viewer="grid">
            <Command idref="derby.getSchemas"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Schema">
         <!-- Drop all views since these are available for type="Tables" -->
         <DataView type="Tables" action="drop"/>
         <DataView type="References" action="drop"/>
      </ObjectView>

      <ObjectView type="Tables">
         <!-- Replace the Tables view with a specific for Derby -->
         <DataView type="Tables" label="Tables" viewer="grid">
            <Input name="menuItem" value="Script: SELECT ALL">
                <Input name="command" value="select * from ${schema=Schema}${object=Table Name}"/>
             </Input>
             <Input name="menuItem" value="Script: DROP TABLE">
                <Input name="command" value="drop table ${schema=Schema}${object=Table Name}"/>
             </Input>

            <Command idref="derby.getTables">
               <Input name="schemaId" value="${schemaId}"/>
               <Input name="tableType" value="'T','S'"/>
            </Command>
         </DataView>
         <DataView type="References" label="References" viewer="tables-refs"
                 doclink="../databaseExplorer/databaseExplorer.html#mozTocId809328">
            <Command idref="getTables">
               <Input name="schema" value="${schema}"/>
               <Input name="objectname" value="%"/>
               <Input name="tableType" value="TABLE,SYSTEM TABLE"/>
            </Command>
         </DataView>
      </ObjectView>

      <!-- Sub def of the Table type view -->
      <ObjectView type="Table">
         <!-- Drop the Versioned view -->
         <DataView type="TablePrivileges" action="drop"/>

         <!--Add this view-->
         <DataView type="Source" label="DDL" viewer="ddl">
            <Input name="formatSQL" value="true"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Views">
         <DataView type="Views" label="Views" viewer="grid">
            <Input name="menuItem" value="Script: SELECT ALL">
                <Input name="command" value="select * from ${schema=Schema}${object=Table Name}"/>
             </Input>
             <Input name="menuItem" value="Script: DROP VIEW">
                <Input name="command" value="drop view ${schema=Schema}${object=Table Name}"/>
             </Input>

            <Command idref="derby.getTables">
               <Input name="schemaId" value="${schemaId}"/>
               <Input name="tableType" value="'V'"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="View">
         <DataView type="Info" label="Info" viewer="node-form"/>
         <DataView type="Data" label="Data" viewer="table-data"/>
         <DataView type="RowCount" label="Row Count" viewer="table-rowcount"/>
         <DataView type="Source" label="DDL" viewer="ddl">
            <Input name="objectType" value="createView"/>
            <Input name="formatSQL" value="true"/>
         </DataView>
      </ObjectView>

      <ObjectView type="Synonyms">
         <DataView type="Synonyms" label="Synonyms" viewer="grid">
            <Command idref="derby.getSynonyms">
               <Input name="schemaId" value="${schemaId}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Synonym">
         <DataView type="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Functions">
         <DataView type="Functions" label="Functions" viewer="grid">
            <Command idref="derby.getFunctions">
               <Input name="schemaId" value="${schemaId}"/>
               <Input name="functionType" value="'F'"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Function">
         <DataView type="SourceEditor" label="Function Editor"
                   viewer="ProcedureViewer"
                   classargs="FUNCTION"
                   doclink="../procEditor/procEditor.html"/>
         <DataView type="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Procedures">
         <DataView type="Procedures" label="Procedures" viewer="grid">
            <Command idref="derby.getFunctions">
               <Input name="schemaId" value="${schemaId}"/>
               <Input name="functionType" value="'P'"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Procedure">
         <DataView type="SourceEditor" label="Procedure Editor"
                   viewer="ProcedureViewer"
                   classargs="PROCEDURE"
                   doclink="../procEditor/procEditor.html"/>
         <DataView type="Columns" action="drop"/>
         <DataView type="Info" label="Info" viewer="node-form"/>
      </ObjectView>

      <ObjectView type="Triggers">
         <DataView type="Triggers" label="Triggers" viewer="grid">
            <Command idref="derby.getTriggers">
               <Input name="schemaId" value="${schemaId}"/>
               <Input name="condition" value="${triggersCondition}"/>
            </Command>
         </DataView>
      </ObjectView>

      <ObjectView type="Trigger">
         <DataView type="SourceEditor" label="Trigger Editor"
                   viewer="ProcedureViewer"
                   classargs="TRIGGER"
                   doclink="../procEditor/procEditor.html"/>
         <DataView type="Info" label="Info" viewer="node-form"/>
      </ObjectView>

   </ObjectsViewDef>

</DatabaseProfile>
